You are given a string str consisting of non-repeating lowercase English letters.
Additionally, you have an array arr of strings, each containing non-repeating characters.
Your task is to create a program that identifies and returns the strings from the arr that are anagrams of the given string str.

The resulting array of strings should be in lexicographically sorted order.

Input format
The first line contains a string str (1 <= |str| <= 26), representing a sequence of non-repeating lowercase English letters.

The second line contains an integer N (1 <= N <= 10^5), representing the number of strings in the arr.

The next N lines each contain a string of non-repeating characters, representing the elements of the arr.

Output format
Return a array of strings containing only those strings from the input array that are anagrams of the given string str.

Resultant array of string should be in sorted order.

Sample Input 1
abc

3

cab

bac

xyz

Sample Output 1
bac

cab

Explanation
Strings "cab" and "bac" are anagrams of the given string "abc".

Sample Input 2
crio

4

iocr

croi

irco

mxyn

Sample Output 2
croi

iocr

irco

Explanation
Strings "croi" , "iocr" and "irco" are anagrams of the given string "crio".

Constraints
1 <= |str| <= 26

1 <= N <= 10^5

1 <= arr[i].length <= 26 where 0 <= i < N (0 based indexing)

|str| == arr[i].length

function isAnagram(s1,s2){
    if(!s1==s2){
        return false;
    }
   let newS1 = new Set(s1);
   let newS2 = new Set(s2);
   for(let key of newS1){
    if(!newS2.has(key)){
         return false;
    }
    } 
    return true;
}
function findAllAnagrams(str, arr) {
    let resultArray =[];
    for(let i =0;i<arr.length;i++){
        if(isAnagram(str,arr[i])==true){
            resultArray.push(arr[i]);
        }
    }
    resultArray.sort();
     return resultArray;
}
